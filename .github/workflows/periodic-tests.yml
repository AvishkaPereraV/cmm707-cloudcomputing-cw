name: Periodic Integration Tests

on:
  schedule:
    - cron: '0 */6 * * *'   # every 6 hours UTC
  workflow_dispatch: {}

jobs:
  test:
    runs-on: [self-hosted, Windows, X64]

    steps:
      - name: Checkout (minimal)
        uses: actions/checkout@v3

      - name: Allow PowerShell scripts (process scope)
        shell: powershell
        run: Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubeconfig
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path "$HOME\.kube" | Out-Null
          [IO.File]::WriteAllBytes("$HOME\.kube\config",[Convert]::FromBase64String("${{ secrets.KUBE_CONFIG_DATA }}"))
          $env:KUBECONFIG = "$HOME\.kube\config"
          kubectl config current-context
          kubectl get nodes -o wide

      # ---------- ANALYTICS ----------
      - name: Smoke test – analytics POST
        shell: powershell
        run: |
          # If blue/green, wait the live deployment to be Available
          try { $color = kubectl get svc analytics-service -o jsonpath='{.spec.selector.color}' 2>$null } catch { $color = $null }
          if ($color) { kubectl rollout status "deploy/analytics-service-$color" --timeout=180s }

          # Start port-forward and wait for local port
          $pf = Start-Process -PassThru -WindowStyle Hidden powershell -ArgumentList 'kubectl port-forward svc/analytics-service 18002:8000'
          try {
            $deadline = (Get-Date).AddSeconds(20)
            while (-not (Test-NetConnection 127.0.0.1 -Port 18002 -InformationLevel Quiet)) {
              if (-not (Get-Process -Id $pf.Id -ErrorAction SilentlyContinue)) { throw "port-forward exited early" }
              if ((Get-Date) -gt $deadline) { throw "localhost:18002 not ready" }
              Start-Sleep -Milliseconds 500
            }

            # POST /track
            $body = @{
              event_type = "periodic_smoke"
              page_url   = "/"
              user_agent = "ci-periodic"
              session_id = "ci-${{ github.run_id }}"
              ts         = (Get-Date).ToString("o")
            } | ConvertTo-Json

            $r = Invoke-WebRequest -Uri http://127.0.0.1:18002/track -Method POST -ContentType 'application/json' -Body $body -UseBasicParsing -TimeoutSec 15
            if ($r.StatusCode -ne 200) { throw "POST /track returned $($r.StatusCode)" }
            Write-Host "analytics-service OK"
          } finally {
            if ($pf) { Stop-Process -Id $pf.Id -Force -ErrorAction SilentlyContinue }
          }

      # ---------- FRONTEND ----------
      - name: Smoke test – frontend HTTP 200
        shell: powershell
        run: |
          # Rolling update app – just ensure Pods are Available
          kubectl rollout status deploy/frontend --timeout=180s

          $pf = Start-Process -PassThru -WindowStyle Hidden powershell -ArgumentList 'kubectl port-forward svc/frontend 18080:80'
          try {
            $deadline = (Get-Date).AddSeconds(20)
            while (-not (Test-NetConnection 127.0.0.1 -Port 18080 -InformationLevel Quiet)) {
              if (-not (Get-Process -Id $pf.Id -ErrorAction SilentlyContinue)) { throw "port-forward exited early" }
              if ((Get-Date) -gt $deadline) { throw "localhost:18080 not ready" }
              Start-Sleep -Milliseconds 500
            }

            $r = Invoke-WebRequest -Uri http://127.0.0.1:18080 -UseBasicParsing -TimeoutSec 20
            if ($r.StatusCode -ne 200) { throw "Frontend returned $($r.StatusCode)" }
            Write-Host "frontend OK"
          } finally {
            if ($pf) { Stop-Process -Id $pf.Id -Force -ErrorAction SilentlyContinue }
          }

      # ---------- GAME (blue/green live only) ----------
      - name: Smoke test – game-service
        shell: powershell
        run: |
          try { $color = kubectl get svc game-service -o jsonpath='{.spec.selector.color}' 2>$null } catch { $color = $null }
          if ($color) { kubectl rollout status "deploy/game-service-$color" --timeout=180s }

          $pf = Start-Process -PassThru -WindowStyle Hidden powershell -ArgumentList 'kubectl port-forward svc/game-service 18001:8000'
          try {
            $deadline = (Get-Date).AddSeconds(20)
            while (-not (Test-NetConnection 127.0.0.1 -Port 18001 -InformationLevel Quiet)) {
              if (-not (Get-Process -Id $pf.Id -ErrorAction SilentlyContinue)) { throw "port-forward exited early" }
              if ((Get-Date) -gt $deadline) { throw "localhost:18001 not ready" }
              Start-Sleep -Milliseconds 500
            }

            $h = Invoke-RestMethod -Uri http://127.0.0.1:18001/health -TimeoutSec 10
            if ($h.status -ne "ok") { throw "/health not ok" }

            $g = Invoke-WebRequest -Uri http://127.0.0.1:18001/games -UseBasicParsing -TimeoutSec 10
            if ($g.StatusCode -ne 200) { throw "/games returned $($g.StatusCode)" }
            Write-Host "game-service OK"
          } finally {
            if ($pf) { Stop-Process -Id $pf.Id -Force -ErrorAction SilentlyContinue }
          }

      # ---------- ORDER (blue/green live only) ----------
      - name: Smoke test – order-service
        shell: powershell
        run: |
          try { $color = kubectl get svc order-service -o jsonpath='{.spec.selector.color}' 2>$null } catch { $color = $null }
          if ($color) { kubectl rollout status "deploy/order-service-$color" --timeout=180s }

          $pf = Start-Process -PassThru -WindowStyle Hidden powershell -ArgumentList 'kubectl port-forward svc/order-service 18003:8000'
          try {
            $deadline = (Get-Date).AddSeconds(20)
            while (-not (Test-NetConnection 127.0.0.1 -Port 18003 -InformationLevel Quiet)) {
              if (-not (Get-Process -Id $pf.Id -ErrorAction SilentlyContinue)) { throw "port-forward exited early" }
              if ((Get-Date) -gt $deadline) { throw "localhost:18003 not ready" }
              Start-Sleep -Milliseconds 500
            }

            $h = Invoke-RestMethod -Uri http://127.0.0.1:18003/health -TimeoutSec 10
            if ($h.status -ne "ok") { throw "/health not ok" }

            $o = Invoke-WebRequest -Uri http://127.0.0.1:18003/orders -UseBasicParsing -TimeoutSec 10
            if ($o.StatusCode -ne 200) { throw "/orders returned $($o.StatusCode)" }
            Write-Host "order-service OK"
          } finally {
            if ($pf) { Stop-Process -Id $pf.Id -Force -ErrorAction SilentlyContinue }
          }
