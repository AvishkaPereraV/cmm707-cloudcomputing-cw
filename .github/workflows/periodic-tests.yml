name: Periodic Integration Tests

on:
  schedule:
    - cron: '0 */6 * * *'   # every 6h UTC
  workflow_dispatch: {}

jobs:
  test:
    runs-on: [self-hosted, Windows, X64]

    steps:
      - name: Checkout (minimal)
        uses: actions/checkout@v3

      - name: Allow PowerShell scripts (process scope)
        shell: powershell
        run: Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubeconfig
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path "$HOME\.kube" | Out-Null
          [IO.File]::WriteAllBytes("$HOME\.kube\config",[Convert]::FromBase64String("${{ secrets.KUBE_CONFIG_DATA }}"))
          $env:KUBECONFIG = "$HOME\.kube\config"
          kubectl config current-context
          kubectl get nodes -o wide

      # --------- ANALYTICS ----------
      - name: Smoke test – analytics POST
        shell: powershell
        run: |
          # Wait for endpoints on the Service
          $deadline = (Get-Date).AddSeconds(180)
          do {
            $eps = kubectl get endpoints analytics-service -o jsonpath='{.subsets[*].addresses[*].ip}' 2>$null
            if ($eps) { break }
            Start-Sleep -Seconds 2
          } while ((Get-Date) -lt $deadline)
          if (-not $eps) { throw "analytics-service has no ready endpoints." }

          # Port-forward svc:8000 -> 18002
          $pf = Start-Process -PassThru -WindowStyle Hidden powershell -ArgumentList 'kubectl port-forward svc/analytics-service 18002:8000'
          try {
            # simple local port wait
            1..15 | % { if (Test-NetConnection 127.0.0.1 -Port 18002 -InformationLevel Quiet) { $true; break } ; Start-Sleep 1 } | Out-Null
            $body = @{event_type="smoke";page_url="/";user_agent="ci-periodic";session_id="ci-${{ github.run_id }}";ts=(Get-Date).ToString("o")} | ConvertTo-Json
            $r = Invoke-WebRequest http://127.0.0.1:18002/track -Method POST -ContentType 'application/json' -Body $body -UseBasicParsing -TimeoutSec 15
            if ($r.StatusCode -ne 200) { throw "POST /track returned $($r.StatusCode)" }
            Write-Host "analytics-service OK"
          } finally {
            if ($pf) { Stop-Process -Id $pf.Id -Force -ErrorAction SilentlyContinue }
          }

      # --------- FRONTEND ----------
      - name: Smoke test – frontend HTTP 200
        shell: powershell
        run: |
          $deadline = (Get-Date).AddSeconds(180)
          do {
            $eps = kubectl get endpoints frontend -o jsonpath='{.subsets[*].addresses[*].ip}' 2>$null
            if ($eps) { break }
            Start-Sleep -Seconds 2
          } while ((Get-Date) -lt $deadline)
          if (-not $eps) { throw "frontend has no ready endpoints." }

          $pf = Start-Process -PassThru -WindowStyle Hidden powershell -ArgumentList 'kubectl port-forward svc/frontend 18080:80'
          try {
            1..15 | % { if (Test-NetConnection 127.0.0.1 -Port 18080 -InformationLevel Quiet) { $true; break } ; Start-Sleep 1 } | Out-Null
            $r = Invoke-WebRequest http://127.0.0.1:18080 -UseBasicParsing -TimeoutSec 20
            if ($r.StatusCode -ne 200) { throw "Frontend returned $($r.StatusCode)" }
            Write-Host "frontend OK"
          } finally {
            if ($pf) { Stop-Process -Id $pf.Id -Force -ErrorAction SilentlyContinue }
          }

      # --------- GAME SERVICE ----------
      - name: Smoke test – game-service
        shell: powershell
        run: |
          $deadline = (Get-Date).AddSeconds(180)
          do {
            $eps = kubectl get endpoints game-service -o jsonpath='{.subsets[*].addresses[*].ip}' 2>$null
            if ($eps) { break }
            Start-Sleep -Seconds 2
          } while ((Get-Date) -lt $deadline)
          if (-not $eps) { throw "game-service has no ready endpoints." }

          $pf = Start-Process -PassThru -WindowStyle Hidden powershell -ArgumentList 'kubectl port-forward svc/game-service 18001:8000'
          try {
            1..15 | % { if (Test-NetConnection 127.0.0.1 -Port 18001 -InformationLevel Quiet) { $true; break } ; Start-Sleep 1 } | Out-Null
            $h = Invoke-RestMethod http://127.0.0.1:18001/health -TimeoutSec 10
            if ($h.status -ne "ok") { throw "/health not ok" }
            $g = Invoke-WebRequest http://127.0.0.1:18001/games -UseBasicParsing -TimeoutSec 10
            if ($g.StatusCode -ne 200) { throw "/games returned $($g.StatusCode)" }
            Write-Host "game-service OK"
          } finally {
            if ($pf) { Stop-Process -Id $pf.Id -Force -ErrorAction SilentlyContinue }
          }

      # --------- ORDER SERVICE ----------
      - name: Smoke test – order-service
        shell: powershell
        run: |
          $deadline = (Get-Date).AddSeconds(180)
          do {
            $eps = kubectl get endpoints order-service -o jsonpath='{.subsets[*].addresses[*].ip}' 2>$null
            if ($eps) { break }
            Start-Sleep -Seconds 2
          } while ((Get-Date) -lt $deadline)
          if (-not $eps) { throw "order-service has no ready endpoints." }

          $pf = Start-Process -PassThru -WindowStyle Hidden powershell -ArgumentList 'kubectl port-forward svc/order-service 18003:8000'
          try {
            1..15 | % { if (Test-NetConnection 127.0.0.1 -Port 18003 -InformationLevel Quiet) { $true; break } ; Start-Sleep 1 } | Out-Null
            $h = Invoke-RestMethod http://127.0.0.1:18003/health -TimeoutSec 10
            if ($h.status -ne "ok") { throw "/health not ok" }
            $o = Invoke-WebRequest http://127.0.0.1:18003/orders -UseBasicParsing -TimeoutSec 10
            if ($o.StatusCode -ne 200) { throw "/orders returned $($o.StatusCode)" }
            Write-Host "order-service OK"
          } finally {
            if ($pf) { Stop-Process -Id $pf.Id -Force -ErrorAction SilentlyContinue }
          }
