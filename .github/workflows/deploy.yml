name: Deploy & Test

on:
  workflow_run:
    workflows: ["Build & Push Images"]
    types: [completed]
  workflow_dispatch:

jobs:
  deploy:
    if: ${{ github.event_name == 'workflow_dispatch' ||
            (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    runs-on: [self-hosted, Windows, X64]


    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Allow PowerShell scripts
        shell: powershell
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          Get-ExecutionPolicy -List

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Check kubectl
        shell: powershell
        run: kubectl version --client

      - name: Configure kubeconfig
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path "$HOME\.kube" | Out-Null
          [IO.File]::WriteAllBytes("$HOME\.kube\config",[Convert]::FromBase64String("${{ secrets.KUBE_CONFIG_DATA }}"))
          $env:KUBECONFIG = "$HOME\.kube\config"
          kubectl config current-context
          kubectl get nodes -o wide

      - name: Verify cluster is up
        shell: powershell
        run: |
          kubectl config current-context
          kubectl cluster-info
          kubectl get nodes -o wide

      - name: Set images to :latest
        shell: powershell
        run: |
          kubectl set image deploy/analytics-service   analytics-service=${{ secrets.DOCKERHUB_USERNAME }}/analytics-service:latest
          kubectl set image deploy/frontend            frontend=${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest

      - name: Wait for rollouts (zero-downtime rolling update)
        shell: powershell
        run: |
          kubectl rollout status deploy/analytics-service   --timeout=180s
          kubectl rollout status deploy/frontend            --timeout=180s

      - name: Smoke test – analytics POST
        shell: powershell
        run: |
          $pf = Start-Process -PassThru -WindowStyle Hidden powershell -ArgumentList 'kubectl port-forward svc/analytics-service 18002:8000'
          Start-Sleep -Seconds 4
          try {
            $payload = @{
              event_type = "page_view"
              page_url   = "/"
              user_agent = "ci-test"
              session_id = "ci-${{ github.run_id }}"
              ts         = (Get-Date).ToString("o")
            } | ConvertTo-Json
            Invoke-RestMethod -Uri http://localhost:18002/track -Method POST -ContentType 'application/json' -Body $payload | Out-Null
            Write-Host "Analytics POST OK"
          } finally {
            Stop-Process -Id $pf.Id -Force
          }

      - name: Smoke test – frontend HTTP 200
        shell: powershell
        run: |
          # forward frontend Service's port 80 to localhost:18080
          $pf = Start-Process -PassThru -WindowStyle Hidden powershell -ArgumentList 'kubectl port-forward svc/frontend 18080:80'
          try {
            Start-Sleep -Seconds 5
            $r = Invoke-WebRequest -Uri http://127.0.0.1:18080 -UseBasicParsing -TimeoutSec 20
            if ($r.StatusCode -ne 200) { throw "Frontend returned $($r.StatusCode)" }
            Write-Host "Frontend OK"
          } finally {
            Stop-Process -Id $pf.Id -Force
          }

      - name: Smoke test – order-service /health and list /orders
        shell: powershell
        run: |
          # Start port-forward order-service:8000 -> localhost:18003
          $pf = Start-Process -PassThru -WindowStyle Hidden powershell -ArgumentList 'kubectl port-forward svc/order-service 18003:8000'

          try {
            # Wait up to ~10s for the port-forward to bind
            $ok = $false
            foreach ($i in 1..10) {
              try {
                $r = Invoke-WebRequest -Uri http://127.0.0.1:18003/health -UseBasicParsing -TimeoutSec 2
                if ($r.StatusCode -eq 200) { $ok = $true; break }
              } catch { Start-Sleep -Milliseconds 800 }
            }
            if (-not $ok) { throw "order-service port-forward never became ready" }

            # Health should be JSON with status=ok
            $h = Invoke-RestMethod -Uri http://127.0.0.1:18003/health -TimeoutSec 10
            if ($h.status -ne "ok") { throw "order-service /health not ok" }

            # /orders should return HTTP 200
            $orders = Invoke-WebRequest -Uri http://127.0.0.1:18003/orders -UseBasicParsing -TimeoutSec 10
            if ($orders.StatusCode -ne 200) { throw "/orders returned $($orders.StatusCode)" }

            Write-Host "order-service OK"
          }
          finally {
            # Make cleanup best-effort; don't fail if the process already exited
            if ($pf -and (Get-Process -Id $pf.Id -ErrorAction SilentlyContinue)) {
              Stop-Process -Id $pf.Id -Force -ErrorAction SilentlyContinue
            }
          }

      - name: Blue-Green deploy – game-service
        shell: powershell
        run: |
          # --- 0) Ensure blue/green resources exist (first run safety) ---
          if (-not (kubectl get deploy game-service-blue -o name 2>$null) `
              -or -not (kubectl get deploy game-service-green -o name 2>$null) `
              -or -not (kubectl get svc game-service -o name 2>$null)) {
            Write-Host "Applying k8s/game-bluegreen-deployment.yaml (first-run bootstrap)…"
            kubectl apply -f k8s/game-bluegreen-deployment.yaml
          }

          # --- 1) Read current live color from Service selector ---
          $svc = kubectl get svc game-service -o json | ConvertFrom-Json
          $currentColor = $null
          if ($svc.spec -and $svc.spec.selector -and $svc.spec.selector.color) {
            $currentColor = $svc.spec.selector.color
          }
          if ([string]::IsNullOrEmpty($currentColor)) {
            throw "game-service Service has no 'color' selector. Did you apply the blue/green manifests?"
          }
          Write-Host "Current live color (game-service):" $currentColor

          # --- 2) Decide inactive color ---
          $inactive = if ($currentColor -eq "blue") { "green" } else { "blue" }
          Write-Host "Inactive color (target for new version):" $inactive

          # --- 3) Update INACTIVE deployment to the new image ---
          $deployName = "game-service-$inactive"
          $image = "${{ secrets.DOCKERHUB_USERNAME }}/game-service:latest"
          kubectl set image deploy/$deployName game-service=$image

          # --- 4) Wait until new pods are Ready ---
          kubectl rollout status deploy/$deployName --timeout=180s

          # --- 5) Smoke test INACTIVE color directly (by pod) ---
          $pod = kubectl get pod -l app=game-service,color=$inactive -o jsonpath='{.items[0].metadata.name}'
          if ([string]::IsNullOrWhiteSpace($pod)) { throw "No pod found for game-service color '$inactive'." }

          $pf = Start-Process -PassThru -WindowStyle Hidden powershell -ArgumentList "kubectl port-forward pod/$pod 18001:8000"
          try {
            # wait a moment for the tunnel
            foreach ($i in 1..10) {
              try { Invoke-WebRequest -Uri http://127.0.0.1:18001/health -UseBasicParsing -TimeoutSec 2 | Out-Null; break } catch { Start-Sleep -Milliseconds 700 }
            }

            $h = Invoke-RestMethod -Uri http://127.0.0.1:18001/health -TimeoutSec 10
            if ($h.status -ne "ok") { throw "game-service ($inactive) /health not ok" }

            $g = Invoke-WebRequest -Uri http://127.0.0.1:18001/games -UseBasicParsing -TimeoutSec 15
            if ($g.StatusCode -ne 200) { throw "game-service ($inactive) /games returned $($g.StatusCode)" }

            Write-Host "Inactive color '$inactive' (game-service) passed smoke test."
          }
          finally {
            if ($pf -and (Get-Process -Id $pf.Id -ErrorAction SilentlyContinue)) {
              Stop-Process -Id $pf.Id -Force -ErrorAction SilentlyContinue
            }
          }

          # --- 6) Flip Service selector to INACTIVE color (promote) ---
          $oldPref = $ErrorActionPreference; $ErrorActionPreference = 'Stop'
          try {
            $patchObj = @{
              spec = @{
                selector = @{
                  app   = "game-service"
                  color = $inactive
                }
              }
            }
            $patchJson = $patchObj | ConvertTo-Json -Depth 10
            $tmp = Join-Path $env:TEMP ("svc-patch-game-{0}.json" -f ([System.Guid]::NewGuid()))
            [System.IO.File]::WriteAllText($tmp, $patchJson, (New-Object System.Text.UTF8Encoding($false)))

            kubectl patch service game-service --type=merge --patch-file="$tmp"

            $now = kubectl get svc game-service -o jsonpath='{.spec.selector.color}'
            Write-Host "game-service now points to color: $now"
            if ($now -ne $inactive) { throw "Service selector did not flip (expected '$inactive', got '$now')." }
          }
          catch {
            Write-Host "Patch failed; trying 'kubectl set selector' fallback..."
            kubectl set selector service/game-service "app=game-service,color=$inactive"
            $now2 = kubectl get svc game-service -o jsonpath='{.spec.selector.color}'
            Write-Host "game-service now points to color (after fallback): $now2"
            if ($now2 -ne $inactive) { throw "Service selector still didn't flip (expected '$inactive', got '$now2')." }
          }
          finally {
            if (Test-Path $tmp) { Remove-Item $tmp -Force -ErrorAction SilentlyContinue }
            $ErrorActionPreference = $oldPref
          }

          # --- 7) Verify via Service after flip ---
          $pf2 = Start-Process -PassThru -WindowStyle Hidden powershell -ArgumentList "kubectl port-forward svc/game-service 18001:8000"
          try {
            Start-Sleep -Seconds 4
            $final = Invoke-WebRequest -Uri http://127.0.0.1:18001/games -UseBasicParsing -TimeoutSec 20
            if ($final.StatusCode -ne 200) { throw "game-service via Service failed post-flip ($($final.StatusCode))" }
            Write-Host "game-service via Service OK after flip."
          }
          finally {
            if ($pf2 -and (Get-Process -Id $pf2.Id -ErrorAction SilentlyContinue)) {
              Stop-Process -Id $pf2.Id -Force -ErrorAction SilentlyContinue
            }
          }

      - name: Blue-Green deploy – order-service
        shell: powershell
        run: |
          # --- 0) Ensure blue/green resources exist (first run safety) ---
          if (-not (kubectl get deploy order-service-blue -o name 2>$null) `
              -or -not (kubectl get deploy order-service-green -o name 2>$null) `
              -or -not (kubectl get svc order-service -o name 2>$null)) {
            Write-Host "Applying k8s/order-bluegreen-deployment.yaml (first-run bootstrap)…"
            kubectl apply -f k8s/order-bluegreen-deployment.yaml
          }

          # --- 1) Read current live color from Service selector ---
          $svc = kubectl get svc order-service -o json | ConvertFrom-Json
          $currentColor = $null
          if ($svc.spec -and $svc.spec.selector -and $svc.spec.selector.color) {
            $currentColor = $svc.spec.selector.color
          }
          if ([string]::IsNullOrEmpty($currentColor)) {
            throw "order-service Service has no 'color' selector. Did you apply the blue/green manifests?"
          }
          Write-Host "Current live color:" $currentColor

          # --- 2) Decide inactive color ---
          $inactive = if ($currentColor -eq "blue") { "green" } else { "blue" }
          Write-Host "Inactive color (target for new version):" $inactive

          # --- 3) Update INACTIVE deployment to the new image ---
          $deployName = "order-service-$inactive"
          $image = "${{ secrets.DOCKERHUB_USERNAME }}/order-service:latest"
          kubectl set image deploy/$deployName order-service=$image

          # --- 4) Wait until new pods are Ready ---
          kubectl rollout status deploy/$deployName --timeout=180s

          # --- 5) Smoke test INACTIVE color directly (by pod label) ---
          $pod = kubectl get pod -l app=order-service,color=$inactive -o jsonpath='{.items[0].metadata.name}'
          if ([string]::IsNullOrWhiteSpace($pod)) { throw "No pod found for order-service color '$inactive'." }

          $pf = Start-Process -PassThru -WindowStyle Hidden powershell -ArgumentList "kubectl port-forward pod/$pod 18003:8000"
          try {
            Start-Sleep -Seconds 4
            $ordersResp = Invoke-WebRequest -Uri http://127.0.0.1:18003/orders -UseBasicParsing -TimeoutSec 20
            if ($ordersResp.StatusCode -ne 200) { throw "order-service ($inactive) /orders returned $($ordersResp.StatusCode)" }
            Write-Host "Inactive color '$inactive' passed smoke test."
          }
          finally {
            if ($pf -and (Get-Process -Id $pf.Id -ErrorAction SilentlyContinue)) {
              Stop-Process -Id $pf.Id -Force -ErrorAction SilentlyContinue
            }
          }

          # --- 6) Flip Service selector to INACTIVE color (promote) ---

          # Fail fast on any errors in this block
          $oldPref = $ErrorActionPreference; $ErrorActionPreference = 'Stop'
          try {
            # Build the patch object and write it to a temp file as UTF-8 without BOM
            $patchObj = @{
              spec = @{
                selector = @{
                  app   = "order-service"
                  color = $inactive
                }
              }
            }
            $patchJson = $patchObj | ConvertTo-Json -Depth 10

            $tmp = Join-Path $env:TEMP ("svc-patch-{0}.json" -f ([System.Guid]::NewGuid()))
            # Use -AsByteStream to avoid BOM; write plain UTF-8
            [System.IO.File]::WriteAllText($tmp, $patchJson, (New-Object System.Text.UTF8Encoding($false)))

            # Apply patch from file (avoids PowerShell quoting/CRLF pitfalls)
            kubectl patch service order-service --type=merge --patch-file="$tmp"

            # Verify flip
            $now = kubectl get svc order-service -o jsonpath='{.spec.selector.color}'
            Write-Host "Service now points to color: $now"
            if ($now -ne $inactive) {
              throw "Service selector did not flip (expected '$inactive', got '$now')."
            }
          }
          catch {
            Write-Host "Patch via --patch-file failed or selector didn't flip. Trying 'kubectl set selector' as fallback..."
            # Fallback path (no --overwrite flag on this command)
            kubectl set selector service/order-service "app=order-service,color=$inactive"

            $now2 = kubectl get svc order-service -o jsonpath='{.spec.selector.color}'
            Write-Host "Service now points to color (after fallback): $now2"
            if ($now2 -ne $inactive) {
              throw "Service selector still didn't flip (expected '$inactive', got '$now2')."
            }
          }
          finally {
            if (Test-Path $tmp) { Remove-Item $tmp -Force -ErrorAction SilentlyContinue }
            $ErrorActionPreference = $oldPref
          }

          # --- (7) Verify via Service after flip
          $pf2 = Start-Process -PassThru -WindowStyle Hidden powershell -ArgumentList "kubectl port-forward svc/order-service 18003:8000"
          try {
            Start-Sleep -Seconds 4
            $final = Invoke-WebRequest -Uri http://127.0.0.1:18003/orders -UseBasicParsing -TimeoutSec 20
            if ($final.StatusCode -ne 200) { throw "order-service via Service failed post-flip ($($final.StatusCode))" }
            Write-Host "order-service via Service OK after flip."
          }
          finally {
            if ($pf2 -and (Get-Process -Id $pf2.Id -ErrorAction SilentlyContinue)) {
              Stop-Process -Id $pf2.Id -Force -ErrorAction SilentlyContinue
            }
          }