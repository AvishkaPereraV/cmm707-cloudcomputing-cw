name: Deploy & Test

on:
  workflow_run:
    workflows: ["Build & Push Images"]
    types: [completed]
  workflow_dispatch:

jobs:
  deploy:
    if: ${{ github.event_name == 'workflow_dispatch' ||
            (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    runs-on: [self-hosted, Windows, X64]


    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Allow PowerShell scripts for this job
        shell: powershell
        run: |
          Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Check kubectl
        shell: powershell
        run: kubectl version --client


      - name: Configure kubeconfig
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path "$HOME\.kube" | Out-Null
          [IO.File]::WriteAllBytes("$HOME\.kube\config",[Convert]::FromBase64String("${{ secrets.KUBE_CONFIG_DATA }}"))
          kubectl config current-context
          kubectl get nodes

      - name: Verify cluster is up
        shell: powershell
        run: |
          kubectl config current-context
          kubectl cluster-info
          kubectl get nodes -o wide

      - name: Set images to :latest
        shell: powershell
        run: |
          kubectl set image deploy/game-service        game-service=${{ secrets.DOCKERHUB_USERNAME }}/game-service:latest
          kubectl set image deploy/order-service       order-service=${{ secrets.DOCKERHUB_USERNAME }}/order-service:latest
          kubectl set image deploy/analytics-service   analytics-service=${{ secrets.DOCKERHUB_USERNAME }}/analytics-service:latest
          kubectl set image deploy/frontend            frontend=${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest

      - name: Wait for rollouts (zero-downtime rolling update)
        shell: powershell
        run: |
          kubectl rollout status deploy/game-service        --timeout=180s
          kubectl rollout status deploy/order-service       --timeout=180s
          kubectl rollout status deploy/analytics-service   --timeout=180s
          kubectl rollout status deploy/frontend            --timeout=180s

      - name: Smoke test – analytics POST
        shell: powershell
        run: |
          $pf = Start-Process -PassThru -WindowStyle Hidden powershell -ArgumentList 'kubectl port-forward svc/analytics-service 18002:8000'
          Start-Sleep -Seconds 4
          try {
            $payload = @{
              event_type = "page_view"
              page_url   = "/"
              user_agent = "ci-test"
              session_id = "ci-${{ github.run_id }}"
              ts         = (Get-Date).ToString("o")
            } | ConvertTo-Json
            Invoke-RestMethod -Uri http://localhost:18002/track -Method POST -ContentType 'application/json' -Body $payload | Out-Null
            Write-Host "Analytics POST OK"
          } finally {
            Stop-Process -Id $pf.Id -Force
          }

      - name: Smoke test – frontend HTTP 200
        shell: powershell
        run: |
          # forward frontend Service's port 80 to localhost:18080
          $pf = Start-Process -PassThru -WindowStyle Hidden powershell -ArgumentList 'kubectl port-forward svc/frontend 18080:80'
          try {
            Start-Sleep -Seconds 5
            $r = Invoke-WebRequest -Uri http://127.0.0.1:18080 -UseBasicParsing -TimeoutSec 20
            if ($r.StatusCode -ne 200) { throw "Frontend returned $($r.StatusCode)" }
            Write-Host "Frontend OK"
          } finally {
            Stop-Process -Id $pf.Id -Force
          }

      - name: Smoke test – game-service /health and list /games
        shell: powershell
        run: |
          # Port-forward game-service:8000 -> localhost:18001
          $pf = Start-Process -PassThru -WindowStyle Hidden powershell -ArgumentList 'kubectl port-forward svc/game-service 18001:8000'
          try {
            Start-Sleep -Seconds 4

            # /health should be 200 and JSON with status=ok
            $h = Invoke-RestMethod -Uri http://127.0.0.1:18001/health -TimeoutSec 15
            if ($h.status -ne "ok") { throw "game-service /health not ok" }

            # Optional extra: call /games (GET) – should return JSON (maybe empty list if no data)
            $g = Invoke-WebRequest -Uri http://127.0.0.1:18001/games -UseBasicParsing -TimeoutSec 15
            if ($g.StatusCode -ne 200) { throw "/games returned $($g.StatusCode)" }

            Write-Host "game-service OK"
          }
          finally {
            Stop-Process -Id $pf.Id -Force
          }


